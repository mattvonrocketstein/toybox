{
    "docs": [
        {
            "location": "/", 
            "text": "What is it?\n\n\nToybox is a template that builds an awesome development environment for virtualbox using vagrant and puppet.  More specifically it comes with a bunch of fun infrastructure components pre-installed so developers can concentrate on developing, not installing services.  Apart from using the toybox as a development playground, this should be usable as pattern boilerplate for other kinds of custom automation.  Toybox includes demos and integration tests for the infrastructure that is bootstrapped- these tests can be run from the guest or the host OS.\n\n\nReference versions\n\n\nVagrant 1.6.5\n and \nVirtualbox 4.3.18\n on the host with an \nUbuntu 14.04\n guest.  Note that currently it's only tested on Ubuntu, but the puppet patterns for infrastructure installation should be more or less the same on Redhat/CentOS.\n\n\nA known working base-box is Ubuntu 14.04 \"trusty\" (for download command, see \"Quick Start\" section).  You can download vagrant \nhere\n, download virtualbox \nhere\n.\n\n\n\n\nBatteries are included\n\n\nVarious system packages for development are installed out of the box.\n\n\n\n\nmisc: git, ack-grep, nmap, screen, and tree\n\n\nbasic dev:\n\n\nruby: ruby 1.9.3, ruby-dev, gem\n\n\npython: python 2.7.6, python-pip, python-dev, python-virtualenv\n\n\n\n\n\n\n\n\n\n\nToys in the toybox\n\n\n\n\nmongodb\n: a popular nosql database\n\n\ndefault port @ 27017\n\n\nmongo version is 2.4.9\n\n\nstarted by default on system boot\n\n\ngenghisapp\n: a data viz tool for mongo\n\n\nversion @ 2.3.11\n\n\nWUI port at 5556\n\n\nsee Vagrantfile to check if port-forwarding is enabled\n\n\n\n\n\n\n\n\n\n\nrabbitmq\n: a message queue\n\n\nErlang R16B03 will be installed\n\n\ndata port @ 5672\n\n\nrabbit version is 3.4.0\n\n\nusers: admin/admin, guest/guest\n\n\nWUI port at 15672\n\n\nsee Vagrantfile to check if port-forwarding is enabled\n\n\ncelery\n: task queue framework (uses rabbit)\n\n\ncelery version is 3.1.6\n\n\nno workers are defined or started by default\n\n\nflower\n: a data viz tool for celery\n\n\nflower version is 0.7.3\n\n\nWUI port @ 5555\n\n\nsee Vagrantfile to check if port-forwarding is enabled\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsupervisor\n: a configurable, lightweight daemon tool\n\n\nversion @ 3.0\n\n\nresponsible for daemonizing flower\n\n\nresponsible for daemonizing genghisapp\n\n\nWUI port @ 9001\n\n\nsee Vagrantfile to check if port-forwarding is enabled\n\n\n\n\n\n\nnginx\n: a webserver with fairly sane configs\n\n\nversion @ 1.4.6\n\n\nWUI/data port @ 80\n\n\ndefault config is simple: just a rendered version of this markdown\n\n\nsee Vagrantfile to check if port-forwarding to host 8080 is enabled\n\n\n\n\n\n\n\n\nOptional Toys\n\n\nSee the \noptional provisioning\n section of the usage documents.\n\n\n\n\n\n\nneo4j\n: a graph database\n\n\n\n\nWUI/data port @ 7474\n\n\ngDB kernel version is 1.7.2\n\n\nthis will also install Java.  sorry\n\n\nsee Vagrantfile to check if port-forwarding is enabled\n\n\n\n\n\n\n\n\nXWindows and \nXMonad\n 0.11\n\n\n\n\nbasic naked installation (well ok, and emacs23)\n\n\nyou must use \nstartx\n; will not startup on boot\n\n\nthe sole window manager (XMonad) will be used by default with \"startx\".\n\n\nxmonad implicitly requires haskell", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-it", 
            "text": "Toybox is a template that builds an awesome development environment for virtualbox using vagrant and puppet.  More specifically it comes with a bunch of fun infrastructure components pre-installed so developers can concentrate on developing, not installing services.  Apart from using the toybox as a development playground, this should be usable as pattern boilerplate for other kinds of custom automation.  Toybox includes demos and integration tests for the infrastructure that is bootstrapped- these tests can be run from the guest or the host OS.", 
            "title": "What is it?"
        }, 
        {
            "location": "/#reference-versions", 
            "text": "Vagrant 1.6.5  and  Virtualbox 4.3.18  on the host with an  Ubuntu 14.04  guest.  Note that currently it's only tested on Ubuntu, but the puppet patterns for infrastructure installation should be more or less the same on Redhat/CentOS.  A known working base-box is Ubuntu 14.04 \"trusty\" (for download command, see \"Quick Start\" section).  You can download vagrant  here , download virtualbox  here .", 
            "title": "Reference versions"
        }, 
        {
            "location": "/#batteries-are-included", 
            "text": "Various system packages for development are installed out of the box.   misc: git, ack-grep, nmap, screen, and tree  basic dev:  ruby: ruby 1.9.3, ruby-dev, gem  python: python 2.7.6, python-pip, python-dev, python-virtualenv", 
            "title": "Batteries are included"
        }, 
        {
            "location": "/#toys-in-the-toybox", 
            "text": "mongodb : a popular nosql database  default port @ 27017  mongo version is 2.4.9  started by default on system boot  genghisapp : a data viz tool for mongo  version @ 2.3.11  WUI port at 5556  see Vagrantfile to check if port-forwarding is enabled      rabbitmq : a message queue  Erlang R16B03 will be installed  data port @ 5672  rabbit version is 3.4.0  users: admin/admin, guest/guest  WUI port at 15672  see Vagrantfile to check if port-forwarding is enabled  celery : task queue framework (uses rabbit)  celery version is 3.1.6  no workers are defined or started by default  flower : a data viz tool for celery  flower version is 0.7.3  WUI port @ 5555  see Vagrantfile to check if port-forwarding is enabled        supervisor : a configurable, lightweight daemon tool  version @ 3.0  responsible for daemonizing flower  responsible for daemonizing genghisapp  WUI port @ 9001  see Vagrantfile to check if port-forwarding is enabled    nginx : a webserver with fairly sane configs  version @ 1.4.6  WUI/data port @ 80  default config is simple: just a rendered version of this markdown  see Vagrantfile to check if port-forwarding to host 8080 is enabled", 
            "title": "Toys in the toybox"
        }, 
        {
            "location": "/#optional-toys", 
            "text": "See the  optional provisioning  section of the usage documents.    neo4j : a graph database   WUI/data port @ 7474  gDB kernel version is 1.7.2  this will also install Java.  sorry  see Vagrantfile to check if port-forwarding is enabled     XWindows and  XMonad  0.11   basic naked installation (well ok, and emacs23)  you must use  startx ; will not startup on boot  the sole window manager (XMonad) will be used by default with \"startx\".  xmonad implicitly requires haskell", 
            "title": "Optional Toys"
        }, 
        {
            "location": "/toybox_usage/", 
            "text": "Quick Start\n\n\nClone the repository and cd into it\n\n\n  $ git clone https://github.com/mattvonrocketstein/toybox.git\n  $ cd toybox\n\n\n\n\nBootstrap vagrant with the plugins and basebox toybox uses\n\n\n  $ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-i386-vagrant-disk1.box\n  $ vagrant plugin install vagrant-vbguest\n  $ vagrant plugin install vagrant-scp\n\n\n\n\nBring up the new toybox and provision it\n.  This will take a long time while the basebox is bootstrapped and the provisioning downloads package updates.  Also Note that if vbguest detects a mismatched guest-additions iso, it may tke even longer while it corrects this.  \nSubsequent calls like the one below will not by default rerun provisioning.\n\n\n  $ vagrant up\n\n\n\n\nIf the command above happens to terminate with a red message \n\"The SSH command responded with a non-zero exit status.  Vagrant assumes that this means the command failed\"\n, it might be caused by some download via apt, gem, or pip which has timed out.  If that's the case, you may want to retry provisioning by executing  \nvagrant provision\n.\n\n\nIf you don't see the \n\"non-zero exit status\"\n message, then it probably succeeded.  But just to be sure that puppet hasn't missed starting or restarting a service that it's updated, you should run\n\n\n  $ vagrant reload\n\n\n\n\nIf you got this far, your new box should alreaady be setup and working\n.  You can connect to it now with the \nvagrant ssh\n command or try \nrunning the tests\n.\n\n\nYou might want to send over some ssh keys to your fresh new development box.\n\n  To copy everything except for the local autothorized_keys into your toybox,\n\n\n  $ find ~/.ssh -type f|grep -v authorized_keys|xargs -I{} vagrant scp {} /home/vagrant/.ssh/\n\n\n\n\n\n\nAdvanced Usage: Optional Provisioning\n\n\nThe optional items are optional mostly because they are big.  You probably don't want this stuff to slow down your install on a slow connections or headless box.\n\n\nProvisioning XWindows\n\n\nIf you wish to use the optional xwindows setup, I strongly suggest installing the vbguest plugin \nvbguest plugin\n.  (\nNote: Unfortunately even then getting full-screen resolution to work may still take some extra fiddling, the situation seems to change slightly with every minor-version release of guest-extensions/virtualbox.)\n If you want to change the window manager or other details of this aspect of provisioning, fork this repo and edit \ntoybox/puppet/modules/site/manifests/xwindows.pp\n.  \nTo enable provisioning for xwindows, run\n:\n\n\n  $ PROVISION_XWIN=true vagrant provision\n\n\n\n\n\n\nProvisioning Neo\n\n\nProvisioning neo is similar to provisioning XWindows, but you will need to download their distribution tarball first.  Note: before you start the download, make sure that you're still in the same directory as this README and the Vagrantfile.\n\n\n  $ wget http://dist.neo4j.org/neo4j-community-1.7.2-unix.tar.gz\n  $ PROVISION_NEO=true vagrant provision", 
            "title": "Usage"
        }, 
        {
            "location": "/toybox_usage/#quick-start", 
            "text": "Clone the repository and cd into it    $ git clone https://github.com/mattvonrocketstein/toybox.git\n  $ cd toybox  Bootstrap vagrant with the plugins and basebox toybox uses    $ vagrant box add trusty64 https://cloud-images.ubuntu.com/vagrant/trusty/current/trusty-server-cloudimg-i386-vagrant-disk1.box\n  $ vagrant plugin install vagrant-vbguest\n  $ vagrant plugin install vagrant-scp  Bring up the new toybox and provision it .  This will take a long time while the basebox is bootstrapped and the provisioning downloads package updates.  Also Note that if vbguest detects a mismatched guest-additions iso, it may tke even longer while it corrects this.   Subsequent calls like the one below will not by default rerun provisioning.    $ vagrant up  If the command above happens to terminate with a red message  \"The SSH command responded with a non-zero exit status.  Vagrant assumes that this means the command failed\" , it might be caused by some download via apt, gem, or pip which has timed out.  If that's the case, you may want to retry provisioning by executing   vagrant provision .  If you don't see the  \"non-zero exit status\"  message, then it probably succeeded.  But just to be sure that puppet hasn't missed starting or restarting a service that it's updated, you should run    $ vagrant reload  If you got this far, your new box should alreaady be setup and working .  You can connect to it now with the  vagrant ssh  command or try  running the tests .  You might want to send over some ssh keys to your fresh new development box. \n  To copy everything except for the local autothorized_keys into your toybox,    $ find ~/.ssh -type f|grep -v authorized_keys|xargs -I{} vagrant scp {} /home/vagrant/.ssh/", 
            "title": "Quick Start"
        }, 
        {
            "location": "/toybox_usage/#advanced-usage-optional-provisioning", 
            "text": "The optional items are optional mostly because they are big.  You probably don't want this stuff to slow down your install on a slow connections or headless box.  Provisioning XWindows  If you wish to use the optional xwindows setup, I strongly suggest installing the vbguest plugin  vbguest plugin .  ( Note: Unfortunately even then getting full-screen resolution to work may still take some extra fiddling, the situation seems to change slightly with every minor-version release of guest-extensions/virtualbox.)  If you want to change the window manager or other details of this aspect of provisioning, fork this repo and edit  toybox/puppet/modules/site/manifests/xwindows.pp .   To enable provisioning for xwindows, run :    $ PROVISION_XWIN=true vagrant provision   Provisioning Neo  Provisioning neo is similar to provisioning XWindows, but you will need to download their distribution tarball first.  Note: before you start the download, make sure that you're still in the same directory as this README and the Vagrantfile.    $ wget http://dist.neo4j.org/neo4j-community-1.7.2-unix.tar.gz\n  $ PROVISION_NEO=true vagrant provision", 
            "title": "Advanced Usage: Optional Provisioning"
        }, 
        {
            "location": "/contributing/", 
            "text": "Implementation Remarks\n\n\nThis section documents a few things that might be useful to people forking this recipe.  If you need toybox to execute additional git-clones, create or provision python virtualenvironments, etc, the examples in \n[1]\n will be useful.  To modify the nginx setup, start in \n[2]\n.  To execute additional configuration in the very last step of provisioning, see \n[3]\n.  To change the window-manager or other applications installed in provisioning xwindows, see \n[4]\n.  For examples of daemonizing random processes, check out the supervisorctl section in \n[5]\n.  As a place to add default additional system packages, \n[6]\n is the suggested spot.\n\n\n\n\npuppet/modules/site/manifests/my_code.pp\n\n\npuppet/modules/site/files/nginx_conf/sites-enabled/default\n\n\npuppet/modules/site/manifests/configuration.pp\n\n\npuppet/modules/site/manifests/xwindows.pp\n\n\npuppet/modules/core/manifests/toybox.pp\n\n\npuppet/modules/core/manifests/basic_dev.pp\n\n\n\n\n\n\nPattern Idempotency\n\n\nMuch effort has gone into making toybox as friendly as possible for low-bandwidth situations.  During repeated calls to \nvagrant provision\n, every effort has been made to avoid unnecessary duplication of effort for expensive network operations like \napt-get update\n, \ngit clone\n, and \npip install\n.  However, relevant changes to configuration that involve new packages or changes to template files, etc, should always be honored.  Please file an issue on github if you find problems.\n\n\n\n\nPuppet File Layout\n\n\n\n\nEntry-point is \npuppet/default.pp\n (as named in the Vagrantfile)\n\n\nThis is probably your starting place for fork-and-mod hacks\n\n\n\n\n\n\nThe \npuppet\n directory has two subdirs, namely \ncore\n and \nsite\n\n\ncore\n is meant for modules that will not change.\n\n\nsite\n is meant for modules that are more idiosyncratic\n\n\n\n\n\n\nTwo stages are defined in \ndefault.pp\n: 'first' and 'last'.\n\n\nStages are used to guarantee aspects of the run-order\n\n\nsee \npuppet language guide\n and the section \"Run Stages\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributing:\n\n\nIssues can be raised on \nthe bugtracker\n and pull requests are always welcome.\n\n\n\n\nTODO:\n\n\n\n\nExperimentation with the \nAWS provider\n?\n\n\noptional install for gephi (a graphdb browser)? use \nthese instructions\n\n\nelasticsearch?\n\n\nzookeeper?\n\n\n\n\n\n\nCredits:\n\n\nPuppet can sometimes make it pretty difficult it is to reuse other code without forking.  Apart from puppet forge standard libraries included in this repo and amongst other things, I have benefited from the work mentioned below:\n\n\n\n\nhttps://github.com/opencredo/neo4j-puppet\n\n\nhttps://github.com/aubricus/vagrant-puppet-boilerplate\n\n\nhttps://forge.puppetlabs.com/proletaryo/supervisor\n\n\nhttps://github.com/netmanagers/puppet-nginx\n\n\nhttps://github.com/nesi/puppet-git", 
            "title": "Contributing"
        }, 
        {
            "location": "/contributing/#implementation-remarks", 
            "text": "This section documents a few things that might be useful to people forking this recipe.  If you need toybox to execute additional git-clones, create or provision python virtualenvironments, etc, the examples in  [1]  will be useful.  To modify the nginx setup, start in  [2] .  To execute additional configuration in the very last step of provisioning, see  [3] .  To change the window-manager or other applications installed in provisioning xwindows, see  [4] .  For examples of daemonizing random processes, check out the supervisorctl section in  [5] .  As a place to add default additional system packages,  [6]  is the suggested spot.   puppet/modules/site/manifests/my_code.pp  puppet/modules/site/files/nginx_conf/sites-enabled/default  puppet/modules/site/manifests/configuration.pp  puppet/modules/site/manifests/xwindows.pp  puppet/modules/core/manifests/toybox.pp  puppet/modules/core/manifests/basic_dev.pp    Pattern Idempotency  Much effort has gone into making toybox as friendly as possible for low-bandwidth situations.  During repeated calls to  vagrant provision , every effort has been made to avoid unnecessary duplication of effort for expensive network operations like  apt-get update ,  git clone , and  pip install .  However, relevant changes to configuration that involve new packages or changes to template files, etc, should always be honored.  Please file an issue on github if you find problems.   Puppet File Layout   Entry-point is  puppet/default.pp  (as named in the Vagrantfile)  This is probably your starting place for fork-and-mod hacks    The  puppet  directory has two subdirs, namely  core  and  site  core  is meant for modules that will not change.  site  is meant for modules that are more idiosyncratic    Two stages are defined in  default.pp : 'first' and 'last'.  Stages are used to guarantee aspects of the run-order  see  puppet language guide  and the section \"Run Stages\"", 
            "title": "Implementation Remarks"
        }, 
        {
            "location": "/contributing/#contributing", 
            "text": "Issues can be raised on  the bugtracker  and pull requests are always welcome.", 
            "title": "Contributing:"
        }, 
        {
            "location": "/contributing/#todo", 
            "text": "Experimentation with the  AWS provider ?  optional install for gephi (a graphdb browser)? use  these instructions  elasticsearch?  zookeeper?", 
            "title": "TODO:"
        }, 
        {
            "location": "/contributing/#credits", 
            "text": "Puppet can sometimes make it pretty difficult it is to reuse other code without forking.  Apart from puppet forge standard libraries included in this repo and amongst other things, I have benefited from the work mentioned below:   https://github.com/opencredo/neo4j-puppet  https://github.com/aubricus/vagrant-puppet-boilerplate  https://forge.puppetlabs.com/proletaryo/supervisor  https://github.com/netmanagers/puppet-nginx  https://github.com/nesi/puppet-git", 
            "title": "Credits:"
        }, 
        {
            "location": "/quick_links/", 
            "text": "Quick links:\n\n\nThis markdown file is rendered to html and used as the default landing page for the toybox nginx installation.  If you're looking at that page, you might find the following links useful:\n\n\n\n\ngenghis\n\n\nflower\n\n\nrabbitmq\n\n\nsupervisor\n\n\nnginx\n\n\nneo", 
            "title": "Quick Links"
        }, 
        {
            "location": "/quick_links/#quick-links", 
            "text": "This markdown file is rendered to html and used as the default landing page for the toybox nginx installation.  If you're looking at that page, you might find the following links useful:   genghis  flower  rabbitmq  supervisor  nginx  neo", 
            "title": "Quick links:"
        }, 
        {
            "location": "/tests/", 
            "text": "Running Tests\n\n\nTests can be run from either the guest or the host, but the meaning of each is slightly different.  Tests will autodetect whether they are running from the guest or the host based on the presence of the \n/vagrant\n directory.\n\n\nBy default, the Vagrantfile forwards lots of ports for the services puppet is expected to bring up.  During development it can be useful to verify that those services are indeed alive.  To bootstrap the testing-setup on the host:\n\n\n  $ virtualenv host_venv\n  $ source host_venv/bin/activate\n  $ pip install -r tests/requirements.txt\n  $ python tests/test_guest.py\n\n\n\n\nDuring normal provisioning, \nguest_venv\n is setup automatically.  To run tests on the guest from the guest, run this command from the host:\n\n\n  $ vagrant ssh -c \n/vagrant/guest_venv/bin/python /vagrant/tests/test_guest.py\n\n\n\n\n\n\n\nRunning Demos\n\n\nDuring default provisioning, databases, message queues, and visualization aids are setup but there is no data to populate them.  Demos included with toybox are just code examples to create some traffic.  All demos require you to connect to the guest and source the main guest virtual-environment:\n\n\n  $ vagrant ssh # connect to guest\n  $ source /vagrant/guest_venv/bin/activate # run this from guest\n\n\n\n\nTo run the \ncelery/rabbit demo\n follows the instructions below.  You can confirm the operations by watching graphs change in real time on your local \nflower\n and \nrabbitmq\n servers.\n\n\n  # send 1000 and 500 tasks to add and subtract worker, respectively\n  $ python /vagrant/demos/demo_celery.py --add -n 1000\n  $ python /vagrant/demos/demo_celery.py --add -n 500\n  # start a worker to deal with tasks\n  $ python /vagrant/demos/demo_celery.py --worker\n\n\n\n\nTo run the \nMongoDB demo\n follow the instructions below.  You can confirm the operations by checking \nyour local genghisapp\n, specifically the \nuser collection\n.\n\n\n  # create 50 fake users\n  $ python /vagrant/demos/demo_mongo.py --records 50\n\n\n\n\nTo run the \nNeo4j demo\n you must already have done some of the \noptional provisioning\n, and then you can follow the instructions below. If it's not present on the guest in the /vagrant directory, the example movies database will be downloaded and afterwards it will be loaded into your neo server.  After loading a dataset, visit \nyour local neo server\n.  If you want to start over, you can flush the database by using the \n--wipedb\n argument to the \ndemo_neo.py\n script.  See the script code for other usage instructions.\n\n\n  # load default datset \ncieasts_12k_movies_50k\n\n  $ python /vagrant/demos/demo_neo.py", 
            "title": "Demos and Tests"
        }, 
        {
            "location": "/tests/#running-tests", 
            "text": "Tests can be run from either the guest or the host, but the meaning of each is slightly different.  Tests will autodetect whether they are running from the guest or the host based on the presence of the  /vagrant  directory.  By default, the Vagrantfile forwards lots of ports for the services puppet is expected to bring up.  During development it can be useful to verify that those services are indeed alive.  To bootstrap the testing-setup on the host:    $ virtualenv host_venv\n  $ source host_venv/bin/activate\n  $ pip install -r tests/requirements.txt\n  $ python tests/test_guest.py  During normal provisioning,  guest_venv  is setup automatically.  To run tests on the guest from the guest, run this command from the host:    $ vagrant ssh -c  /vagrant/guest_venv/bin/python /vagrant/tests/test_guest.py", 
            "title": "Running Tests"
        }, 
        {
            "location": "/tests/#running-demos", 
            "text": "During default provisioning, databases, message queues, and visualization aids are setup but there is no data to populate them.  Demos included with toybox are just code examples to create some traffic.  All demos require you to connect to the guest and source the main guest virtual-environment:    $ vagrant ssh # connect to guest\n  $ source /vagrant/guest_venv/bin/activate # run this from guest  To run the  celery/rabbit demo  follows the instructions below.  You can confirm the operations by watching graphs change in real time on your local  flower  and  rabbitmq  servers.    # send 1000 and 500 tasks to add and subtract worker, respectively\n  $ python /vagrant/demos/demo_celery.py --add -n 1000\n  $ python /vagrant/demos/demo_celery.py --add -n 500\n  # start a worker to deal with tasks\n  $ python /vagrant/demos/demo_celery.py --worker  To run the  MongoDB demo  follow the instructions below.  You can confirm the operations by checking  your local genghisapp , specifically the  user collection .    # create 50 fake users\n  $ python /vagrant/demos/demo_mongo.py --records 50  To run the  Neo4j demo  you must already have done some of the  optional provisioning , and then you can follow the instructions below. If it's not present on the guest in the /vagrant directory, the example movies database will be downloaded and afterwards it will be loaded into your neo server.  After loading a dataset, visit  your local neo server .  If you want to start over, you can flush the database by using the  --wipedb  argument to the  demo_neo.py  script.  See the script code for other usage instructions.    # load default datset  cieasts_12k_movies_50k \n  $ python /vagrant/demos/demo_neo.py", 
            "title": "Running Demos"
        }
    ]
}